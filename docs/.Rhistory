library( dplyr ) # for data wrangling
library( DT ) # for datatables and interactive tables in rmarkdown
library( ggplot2 ) # for visualizations
library( scales ) # for visualizations
load( "data/step-05-files-to-analyze/BOOTSTRAP-RESULTS.Rdata" )
wd()
getwd()
setwd("~/Dropbox/Research_Shared Folders/USC Mission Paper/Drafts/bespoke-taxonomies/FRANCISCO")
getwd()
load( "data/step-05-files-to-analyze/BOOTSTRAP-RESULTS.Rdata" )
df.types <- c("Minimal", "Standard", "Custom")
df <- cbind( df.minimal, df.types[1] ) #bind a column for dataset to each row
colnames( df)[7] <- "dataset" #rename the dataset
df.holding <- cbind( df.standard, df.types[2] ) #repeat the earlier step with a temporary object
colnames( df.holding )[7] <- "dataset"
df <- rbind( df, df.holding ) #bind the temporary object onto the dataframe
df.holding <- cbind( df.custom, df.types[3] )
colnames( df.holding )[7] <- "dataset"
df <- rbind( df, df.holding )
rm(df.holding)
str( df ) #preview the structure
dim.old <- comma( nrow( df ) ) #number of rows before removing NAs
dim.NA <- comma(
length( df$metric.value[
is.na( df$metric.value ) |
is.nan( df$metric.value ) ]
)
) #number of rows with missing values
# Replace either category of missing values with "NA"
df$metric.value[ is.na( df$metric.value ) | is.nan( df$metric.value ) ] <- NA
#Remove rows with missing values from the dataset
df <- na.omit( df )
dim.new <- comma( nrow( df ) )
naOutput <- data.frame(
rbind( dim.old, dim.NA, dim.new ),
row.names = c("Original number of rows", "Rows with missing values (NA or NaN)", "Rows without missing values")
)
colnames( naOutput ) <- ""
print( "Comparison of the original count of rows, rows with NAs, and  new count of rows " )
naOutput
head( df.minimal[ is.na(df.minimal$metric.value), ], 4 )
# Relevel metric type factor - convert from characters to factors
df$metric.type <- factor( df$metric.type )
# Find average of each metric by training data size
df.summary <-
df %>%
group_by( n.train, prediction.class, metric.type, dataset  ) %>%
summarize( value = mean( metric.value ),
min=min(metric.value),
max=max(metric.value),
sd=sd(metric.value),
class.prop=mean(n.predict.class/100) )
levels( df.summary$metric.type )
dim(df.summary)
head( as.data.frame(df.summary), 9 )
df.demo <-
df.summary %>%
filter( prediction.class=="ntmaj10art" & metric.type=="Balanced.Accuracy" & dataset=="Standard")
head( as.data.frame(df.demo), 6 )
x <- df.demo$n.train
y <- df.demo$value
plot( x, y, type="b",  bty="n", xaxt="n", yaxt="n",
pch=19, col=gray( 0.0,0.25), cex=1.8,
xlab="Training Dataset Size", ylab="Balanced Accuracy",
main = "Preview of Averaged Balanced Accuracy for NTEE\nMajor 10 Group Art with Standard Cleaning",
cex.main = 1)
axis( side = 2, at = seq(0.01, 1.00, 0.01) )
axis( side = 1, at= seq(0,max(df.demo$n.train),max(df.demo$n.train)/10) )
abline( h=seq(0.01, 1.00, 0.01), lwd=0.5, col=gray(0.7,0.3) )
abline( v=seq(0,max(df.demo$n.train),max(df.demo$n.train)/10), lwd=0.5, col=gray(0.7,0.3) )
lines( lowess(x,y), col="firebrick", lty=1, lwd=4 )
box( col=gray(0.7,0.3) )
points( x, y, type="b", pch=19, col=gray( 0.0,0.25), cex=1.8 )
#Convert training dataset sizes to factor values
# Minimal = green "green3"
# Standard = red "firebrick3"
# Custom = blue "deepskyblue3"
x.val <- as.factor( df.summary$n.train )
df.summary$dataset_groups <- factor(df.summary$dataset,
levels = c("Minimal", "Standard", "Custom" ) )
boxplots.balAcc <- ggplot(df.summary, aes(x=x.val, y=value, fill=dataset, order = dataset)) +
geom_boxplot( show.legend = F, width = 0.5 ) +
facet_wrap(facets = ~dataset_groups,
dir = "v") +
scale_fill_manual( values = setNames(
c( "green3", "firebrick3", "deepskyblue3" ),
levels(df.summary$dataset_groups) ) ) +
theme_bw( ) +
theme( axis.text = element_text( size = 13 ),
axis.title = element_text( size = 16, face = "bold" ),
strip.text = element_text(size = 18) ) +
scale_x_discrete( breaks = unique(x.val)[seq(1, length(unique(x.val)), by = 2)] )
print( boxplots.balAcc + labs( y = "Averaged Balanced Accuracy\n", x = "\nTraining Dataset Size" ) )
df.summary2 <- df.summary
df.summary2$dataset <- gsub("Minimal", "Basic", df.summary2$dataset)
#Convert training dataset sizes to factor values
# Minimal = green "green3"
# Standard = red "firebrick3"
# Custom = blue "deepskyblue3"
x.val <- as.factor( df.summary2$n.train )
df.summary2$dataset_groups <- factor(df.summary2$dataset,
levels = c("Basic", "Standard", "Custom" ) )
boxplots.balAcc2 <- ggplot(df.summary2, aes(x=x.val, y=value, fill=dataset, order = dataset)) +
geom_boxplot( show.legend = F, width = 0.5 ) +
facet_wrap(facets = ~dataset_groups,
dir = "v") +
scale_fill_manual( values = setNames(
c( "green3", "firebrick3", "deepskyblue3" ),
levels(df.summary2$dataset_groups) ) ) +
theme_bw( ) +
theme( axis.text = element_text( size = 13 ),
axis.title = element_text( size = 16, face = "bold" ),
strip.text = element_text(size = 18) ) +
scale_x_discrete( breaks = unique(x.val)[seq(1, length(unique(x.val)), by = 2)] )
print( boxplots.balAcc2 + labs( y = "Averaged Balanced Accuracy\n", x = "\nTraining Dataset Size" ) )
#Convert training dataset sizes to factor values
# Minimal = green "green3"
# Standard = red "firebrick3"
# Custom = blue "deepskyblue3"
x.val <- as.factor( df.summary$n.train )
df.summary$dataset_groups <- factor(df.summary$dataset["Minimal"])
boxplots.balAcc <- ggplot(df.summary, aes(x=x.val, y=value, fill=dataset, order = dataset)) +
geom_boxplot( show.legend = F, width = 0.5 ) +
facet_wrap(facets = ~dataset_groups,
dir = "v") +
scale_fill_manual( values = setNames(
c( "green3", "firebrick3", "deepskyblue3" ),
levels(df.summary$dataset_groups) ) ) +
theme_bw( ) +
theme( axis.text = element_text( size = 13 ),
axis.title = element_text( size = 16, face = "bold" ),
strip.text = element_text(size = 18) ) +
scale_x_discrete( breaks = unique(x.val)[seq(1, length(unique(x.val)), by = 2)] )
print( boxplots.balAcc + labs( y = "Averaged Balanced Accuracy\n", x = "\nTraining Dataset Size" ) )
boxplots.balAcc <- ggplot(df.summary, aes(x=x.val, y=value, fill=dataset, order = dataset)) +
geom_boxplot( show.legend = F, width = 0.5 ) +
#facet_wrap(facets = ~dataset_groups,
#           dir = "v") +
scale_fill_manual( values = setNames(
c( "green3", "firebrick3", "deepskyblue3" ),
levels(df.summary$dataset_groups) ) ) +
theme_bw( ) +
theme( axis.text = element_text( size = 13 ),
axis.title = element_text( size = 16, face = "bold" ),
strip.text = element_text(size = 18) ) +
scale_x_discrete( breaks = unique(x.val)[seq(1, length(unique(x.val)), by = 2)] )
print( boxplots.balAcc + labs( y = "Averaged Balanced Accuracy\n", x = "\nTraining Dataset Size" ) )
boxplots.balAcc <- ggplot(df.summary, aes(x=x.val, y=value, fill=dataset, order = dataset)) +
geom_boxplot( show.legend = F, width = 0.5 ) +
#facet_wrap(facets = ~dataset_groups,
#           dir = "v") +
scale_fill_manual( values = setNames(
"green3",
"Minimal" )) +
theme_bw( ) +
theme( axis.text = element_text( size = 13 ),
axis.title = element_text( size = 16, face = "bold" ),
strip.text = element_text(size = 18) ) +
scale_x_discrete( breaks = unique(x.val)[seq(1, length(unique(x.val)), by = 2)] )
print( boxplots.balAcc + labs( y = "Averaged Balanced Accuracy\n", x = "\nTraining Dataset Size" ) )
#Convert training dataset sizes to factor values
# Minimal = green "green3"
# Standard = red "firebrick3"
# Custom = blue "deepskyblue3"
x.val <- as.factor( df.summary$n.train )
df.summary$dataset_groups <- factor(df.summary$dataset["Minimal"] )
boxplots.balAcc <- ggplot(df.summary$dataset["Minimal"], aes(x=x.val, y=value, fill=dataset, order = dataset)) +
geom_boxplot( show.legend = F, width = 0.5 ) +
facet_wrap(facets = ~dataset_groups,
dir = "v") +
scale_fill_manual( values = setNames(
c( "green3", "firebrick3", "deepskyblue3" ),
levels(df.summary$dataset_groups) ) ) +
theme_bw( ) +
theme( axis.text = element_text( size = 13 ),
axis.title = element_text( size = 16, face = "bold" ),
strip.text = element_text(size = 18) ) +
scale_x_discrete( breaks = unique(x.val)[seq(1, length(unique(x.val)), by = 2)] )
print( boxplots.balAcc + labs( y = "Averaged Balanced Accuracy\n", x = "\nTraining Dataset Size" ) )
#Convert training dataset sizes to factor values
# Minimal = green "green3"
# Standard = red "firebrick3"
# Custom = blue "deepskyblue3"
df.summary <- df.summary$dataset[ "Minimal"]
df.summary[1]
df.summary[,1]
df.summary[1,]
#Convert training dataset sizes to factor values
# Minimal = green "green3"
# Standard = red "firebrick3"
# Custom = blue "deepskyblue3"
df.summary <- df.summary[df.summary$dataset == "Minimal",]
#Convert training dataset sizes to factor values
# Minimal = green "green3"
# Standard = red "firebrick3"
# Custom = blue "deepskyblue3"
df.summary <- df.summary[df.summary$dataset == "Minimal"]
